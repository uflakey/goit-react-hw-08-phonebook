{"version":3,"file":"static/js/665.148e7313.chunk.js","mappings":"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","sources":["slice/contacts/selector.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContact = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectAddContact = createSelector(\n  [selectContact, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"label\":\"ContactForm_label__-cVXI\",\"btn\":\"ContactForm_btn__wll+u\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContact } from 'slice/contacts/selector';\nimport css from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { fetchAddContactThunk } from 'slice/contacts/thunk';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContact);\n  const [formData, setFormData] = useState({ name: '', number: '' });\n\n  const handleChange = e => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isContactExists =\n      contacts &&\n      contacts.some(\n        contact =>\n          contact.name.toLowerCase() === formData.name.toLowerCase() ||\n          contact.number === formData.number\n      );\n\n    if (isContactExists) {\n      alert('Contact with the same name or number already exists!');\n      return;\n    }\n\n    dispatch(fetchAddContactThunk({ ...formData, id: nanoid() }));\n    setFormData({ name: '', number: '' });\n  };\n\n  return (\n    <form className={css.contact} onSubmit={handleSubmit}>\n      <h3>Name</h3>\n      <input\n        className={css.inpute}\n        type=\"text\"\n        name=\"name\"\n        value={formData.name}\n        onChange={handleChange}\n        required\n        placeholder=\"Name\"\n      />\n      <h3>Number</h3>\n      <input\n        className={css.inpute}\n        type=\"tel\"\n        name=\"number\"\n        value={formData.number}\n        onChange={handleChange}\n        required\n        placeholder=\"Phone number\"\n      />\n      <button className={css.add} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"itemName\":\"ContactList_itemName__6OYsD\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAddContact } from 'slice/contacts/selector';\nimport css from './ContactList.module.css';\nimport { fetchDeleteContactThunk } from 'slice/contacts/thunk';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAddContact);\n\n  const onDelete = id => {\n    dispatch(fetchDeleteContactThunk(id));\n  };\n\n  return (\n    <ul className={css.item}>\n      {contacts &&\n        contacts.map(contact => (\n          <li className={css.list} key={contact.id}>\n            <div className={css.block}>\n              {contact.name} : {contact.number}\n            </div>\n            <button className={css.delete} onClick={() => onDelete(contact.id)}>\n              Delete\n            </button>\n          </li>\n        ))}\n    </ul>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../slice/contacts/filterSlice';\nimport css from './Filter.module.css';\nimport { selectFilter } from 'slice/contacts/selector';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const onChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <input\n      className={css.search}\n      type=\"text\"\n      value={filter}\n      onChange={onChange}\n      placeholder=\"Search contacts\"\n    />\n  );\n};","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContactsThunk } from 'slice/contacts/thunk';\n\nconst Contacts = () => {\n  const { error, contacts } = useSelector(state => state.contacts);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n  return (\n    <div className=\"container\">\n      {error && <p> {error} </p>}\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <h4>Find contacts by name</h4>\n      <Filter />\n      {contacts && <ContactList />}\n    </div>\n  );\n};\n\nexport default Contacts;"],"names":["selectContact","state","contacts","selectFilter","filter","selectAddContact","createSelector","contact","name","toLowerCase","includes","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","dispatch","useDispatch","useSelector","_useState","useState","number","_useState2","_slicedToArray","formData","setFormData","handleChange","e","_objectSpread","_defineProperty","target","value","_jsxs","className","css","onSubmit","preventDefault","some","alert","fetchAddContactThunk","children","_jsx","type","onChange","required","placeholder","ContactList","map","onClick","fetchDeleteContactThunk","Filter","setFilter","_useSelector","error","useEffect","fetchContactsThunk"],"sourceRoot":""}